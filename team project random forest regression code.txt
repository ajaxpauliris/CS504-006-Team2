
#random forest regression model for cs504 team 2
#import packages
pip install scikit-learn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import datetime


#read in data
df = pd.read_csv('C:/Users/rgraha4/CS504/data.csv')

#look at data
descdf = df.describe()
print(descdf)

# get summary with Tukey's five number summary for numerical variables
print(df.dtypes)
print(df.columns)

# Target: 1 if yield curve inverted (spread < 0), else 0
df['Inverted'] = (df['treasury_maturity'] < 0).astype(int)

# Shift features to avoid data leakage (use previous month data to predict current month)
features = [
    'house_price_index',
    'new_private_house_owned',
    'home_supply',
    'federal_rate',
    'real_income',
    'consumption_price_index',
    'gdp',
]
df[features] = df[features].shift(1)

# Drop rows with missing data from lag
df.dropna(inplace=True)

# Feature matrix and target
X = df[features]
y = df['Inverted']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)


# Fit Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)


# Get feature importances
feature_importances = model.feature_importances_

# Display feature importances
importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
print(importance_df.sort_values(by='Importance', ascending=False))

# Predict
y_pred = model.predict(X_test)

# Plot actual vs predicted
df_test = df.iloc[-len(y_test):].copy()
df_test['Predicted Spread'] = y_pred

# create rsquared to judge model performance
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')

# create mean absolute error to judge model performance
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# create mean squared error to judge model performance
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# create root mean squared error to judge model performance
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'Root Mean Squared Error: {rmse}')

# create mean absolute percentage error
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
print(f'Mean Absolute Percentage Error: {mape}')



plt.figure(figsize=(12, 6))
plt.plot(df_test.index, df_test['treasury_maturity'], label='Actual Spread', linewidth=2)
plt.plot(df_test.index, df_test['Predicted Spread'], label='Predicted Spread', linestyle='--')
plt.axhline(0, color='gray', linestyle=':', alpha=0.6)
plt.title("Predicted vs Actual 10Yâ€“3M Yield Curve Spread (Random Forest)")
plt.ylabel("Spread (bps)")
plt.xlabel("Date")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

#source chat gpt prompt please provide python code using various economic monthly indicators to create a predictive random forest #regressive model to predict  monthly 10 year  3 month  united states treasury rate spreads also known as the yield curve. 

#This model predicts the numeric spread, not just inversion.

#You can swap in other models like XGBoost, Gradient Boosting, or Neural Networks for more complexity.

#You can tune hyperparameters for the random forest (depth, trees, etc.) to improve accuracy.
