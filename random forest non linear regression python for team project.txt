#import packages
pip install scikit-learn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#from pandas_datareader.data import DataReader
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import datetime


#read in data
df = pd.read_csv('C:/Users/rgraha4/CS504/data.csv')

#look at data

descdf = df.describe()
print(descdf)

# get summary with Tukey's five number summary for numerical variables

print(df.dtypes)

print(df.columns)




# Target: 1 if yield curve inverted (spread < 0), else 0
df['Inverted'] = (df['treasury_maturity'] < 0).astype(int)

# Shift features to avoid data leakage (use previous month data to predict current month)
features = [
    'house_price_index',
    'new_private_house_owned',
    'home_supply',
    'federal_rate',
    'real_income',
    'consumption_price_index',
    'gdp',
]
df[features] = df[features].shift(1)

# Drop rows with missing data from lag
df.dropna(inplace=True)

# Feature matrix and target
X = df[features]
y = df['Inverted']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)


# Fit Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.4f}")

# Plot actual vs predicted
df_test = df.iloc[-len(y_test):].copy()
df_test['Predicted Spread'] = y_pred

plt.figure(figsize=(12, 6))
plt.plot(df_test.index, df_test['Yield_Spread'], label='Actual Spread', linewidth=2)
plt.plot(df_test.index, df_test['Predicted Spread'], label='Predicted Spread', linestyle='--')
plt.axhline(0, color='gray', linestyle=':', alpha=0.6)
plt.title("Predicted vs Actual 10Y–3M Yield Curve Spread (Random Forest)")
plt.ylabel("Spread (bps)")
plt.xlabel("Date")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
🔍 Notes:
This model predicts the numeric spread, not just inversion.

You can swap in other models like XGBoost, Gradient Boosting, or Neural Networks for more complexity.

You can tune hyperparameters for the random forest (depth, trees, etc.) to improve accuracy.

Would you like a version using XGBoost or Neural Nets, or do you want to export the predictions to Excel or CSV?








