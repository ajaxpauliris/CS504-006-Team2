

#import packages

pip install scikit-learn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import datetime


#read in data
df = pd.read_csv('C:/Users/rgraha4/CS504/data.csv')

#look at data
descdf = df.describe()
print(descdf)


# Ensure the data is sorted by date
df = df.sort_values(by='Date')


# Lag the independent variables by six months
lagged_df = df.shift(periods=6)


# Drop rows with NaN values created by the lag
lagged_df = lagged_df.dropna()


# Define the independent variables (economic indices)
X = lagged_df[[
    'house_price_index',
    'new_private_house_owned',
    'home_supply',
    'federal_rate',
    'real_income',
    'consumption_price_index',
    'gdp']] 

# Define the dependent variable (spread)
y = lagged_df['treasury_maturity']



# get summary with Tukey's five number summary for numerical variables
print(df.dtypes)
print(df.columns)


# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)

# Fit Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)


# Get feature importances
feature_importances = model.feature_importances_

# Display feature importances
importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
print(importance_df.sort_values(by='Importance', ascending=False))

# Predict
y_pred = model.predict(X_test)

# Plot actual vs predicted
df_test = df.iloc[-len(y_test):].copy()
df_test['Predicted Spread'] = y_pred

# create rsquared to judge model performance
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')

# create mean absolute error to judge model performance
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}:2f')

# create mean squared error to judge model performance
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# create root mean squared error to judge model performance
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'Root Mean Squared Error: {rmse}')

# create mean absolute percentage error
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
print(f'Mean Absolute Percentage Error: {mape}')


#plot results from random forest regression
plt.figure(figsize=(12, 6))
plt.plot(df_test.index, df_test['treasury_maturity'], label='Actual Spread', linewidth=2)
plt.plot(df_test.index, df_test['Predicted Spread'], label='Predicted Spread', linestyle='--')
plt.axhline(0, color='gray', linestyle=':', alpha=0.6)
plt.title("Predicted vs Actual 10Y–3M Yield Curve Spread (Random Forest)")
plt.ylabel("Spread (bps)")
plt.xlabel("Date")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

#plot actual versus predicted values
import matplotlib.pyplot as plt

# Assuming y_test and y_pred are your actual and predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs. Predicted Values of Yield Curve Spread using six month lag')
plt.show()

#Plotting Feature Importances

import seaborn as sns

# Assuming model is your trained RandomForestRegressor
feature_importances = model.feature_importances_
features = X.columns

# Create a DataFrame for better visualization
importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})

# Sort the DataFrame by importance
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importances for Yield Spread Prediction Using a Six Month Lag')
plt.show()
